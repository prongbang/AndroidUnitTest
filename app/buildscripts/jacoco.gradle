apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.3"
    // Custom reports directory can be specfied like this:
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {

    android.applicationVariants.all { variant ->

        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        def uiTestCoverageTaskName = "test${variantName.capitalize()}CoverageReport"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: ["$testTaskName"]) {
            // "$uiTestCoverageTaskName"
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                html.destination "${project.buildDir}/jacocoReport"
                xml.enabled = false
                csv.enabled = false
            }

            jacocoClasspath = configurations['jacocoAnt']

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    '**/*Mock*.*',
                    'android/**/*.*',
                    '**/*_Provide*/**',
                    '**/*_Factory*/**',
                    '**/*_MembersInjector.class',
                    '**/*_Provide*Factory*.*',
                    '**/*$Lambda$*.*',
                    '**/*Dagger*',
                    "**/*Binding",
                    '**/databinding',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/android/databinding/*',
                    '**/*$Builder*',
                    '**/*$Parcelable*.*',
                    '**/*Adapter*.*',
                    '**/*ViewHolder*.*',
                    '**/*Listener*.*',
                    '**/*Dialog*.*',
                    '**/*Fullscreen*.*',
                    '**/*Application*.*',
                    '**/*Keyboard*.*',
                    '**/*Exception*.*',
                    '**/*R2*.*',
                    '**/*BR*.*',
                    '**/*Model*.*',
                    '**/*Result*.*',
                    '**/*Companion*.*',
                    '**/*ServiceGenerator*.*',
                    '**/*Config*.*',
                    '**/*UseCase.execute*',
                    '**/*DaggerApplicationComponent*.*',
                    '**/Dagger*Component*.*',
                    '**/Dagger*Subcomponent*.*',
                    '**/*Subcomponent$Builder.*',
                    '**/*Activity*.*',
                    '**/*Module*.*',
                    '**/*Factory*.*',
                    '**/*Constant*',
                    '**/*Injector*.class',
                    '**/*Storage*.class',
                    '**/*Glide*.class',
                    '**/*Contributor*.class',
                    '**/*Creator*.class',
                    '**/*Fragment*.class',
                    '**/*FragmentArgs*.class',
                    '**/*FragmentDirections*.class',
                    '**/*Binding*.class',
                    '**/*BinderMapper*.class'
            ]

            def javaCompileTask
            if (variant.hasProperty('javaCompileProvider')) {
                // Android 3.3.0+
                javaCompileTask = variant.javaCompileProvider.get()
            } else {
                javaCompileTask = variant.javaCompile
            }

            def javaClasses = fileTree(dir: javaCompileTask.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories = files([javaClasses, kotlinClasses])

            sourceDirectories = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])

            executionData = files([
                    "$project.buildDir/jacoco/${testTaskName}.exec"
            ])

        }
    }
}

